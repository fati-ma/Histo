# -*- coding: utf-8 -*-
"""Classification with Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VcniVQoeJGqC4FjOMciM6so7BSayDzlW
"""

from glob import glob
#Try adding a *.png
train = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/**/*.png", recursive=True)
#val = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Validation/**/*.png", recursive=True)
#test = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Test/**/*.png", recursive=False)

print(len(train))

k = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Classes/**/*.png", recursive=True)

print(len(k))

p = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Classes/Class 1/*.png", recursive=False)
print(len(p))

n = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Classes/Class 0/*.png", recursive=False)
print(len(n))

import matplotlib.pyplot as plt

freq = [len(p), len(n)]
classes = ["1", "0"]
plt.bar(classes, freq)
plt.show()

positive = []
negative = []

for i in range(len(train)):
  negative.append(train[i]) if("class0.png" in train[i]) else positive.append(train[i])

import matplotlib.pyplot as plt

classes = "1", "0"
values = [len(positive), len(negative)]
emph = (0, 0.1)

fig1, ax1 = plt.subplots()
ax1.pie(values, explode=emph, labels=classes, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')

plt.show()

from glob import glob
val = glob("/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Validation/**/*.png", recursive=True)

print(len(val))

positive_val = []
negative_val = []

for i in range(len(val)):
  negative_val.append(val[i]) if("class0.png" in val[i]) else positive_val.append(val[i])

print(len(negative_val))
print(len(positive_val))

#print((len(positive)/(len(positive)+len(negative))))

import matplotlib.pyplot as plt

classes = "1", "0"
values = [len(positive_val), len(negative_val)]
emph = (0, 0.1)

fig1, ax1 = plt.subplots()
ax1.pie(values, explode=emph, labels=classes, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')

plt.show()

from tqdm import tqdm
import shutil

for i in tqdm(range(36000)):
  shutil.move(negative_val[i], "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Validation/Class 0")

for i in tqdm(range(len(positive_val))):
  shutil.move(positive_val[i], "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Validation/Class 1")

import shutil
from tqdm import tqdm

for i in tqdm(range(34804)):
#  try:
  shutil.move(positive[4021+i], "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Class 1")
#  except:
#    shutil.move(positive[i+1], "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Class 1")

for i in tqdm(range(len(negative))):
  shutil.move(negative[i], "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Class 0")

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Flatten, Dense, BatchNormalization, Dropout, ReLU

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(50, 50 ,3), padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(BatchNormalization())

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.25))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss="binary_crossentropy", metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1/255, shear_range=0.2, horizontal_flip=True, 
                                   rotation_range=40, width_shift_range=0.2, height_shift_range=0.2)
test_datagen = ImageDataGenerator(rescale=1/255)

train_path = "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Train/Classes"
val_path = "/content/drive/MyDrive/Colab Notebooks/IDC_regular_ps50_idx5/Validation/Classes"

#training_set = []
#val_set = []
import random
import keras

#Change the files used after each run
training_set = train_datagen.flow_from_directory(train_path, target_size=(50, 50), batch_size = 32, class_mode='binary')

val_set = test_datagen.flow_from_directory(val_path, target_size=(50, 50), batch_size=32, class_mode='binary')

#  test_set = test_datagen.flow_from_directory(test[x], target_size=(50, 50), batch_size=32, class_mode='binary')

logger = keras.callbacks.TensorBoard(
    log_dir='logs',
    write_graph=True,
    histogram_freq=0
)


model_train = model.fit_generator(training_set, steps_per_epoch=200, 
                                  epochs=15,
                                  validation_data = val_set,
                                  validation_steps = 100, 
                                  callbacks = [logger])

#Try to add the validation set parameter and use the validation folder for the .fit_generator
#Use .model_history() to get more details regarding performance